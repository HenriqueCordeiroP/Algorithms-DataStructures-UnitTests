import pytest
from src.Algorithms import Algorithms
import time
# best = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]
# average = [79, 50, 30, 13, 95, 94, 57, 31, 7, 65, 88, 59, 39, 73, 28, 6, 5, 66, 82, 100, 32, 41, 27, 84, 36, 2, 56, 43, 38, 26, 19, 37, 16, 8, 54, 63, 45, 49, 34, 70, 89, 11, 15, 80, 83, 81, 23, 40, 97, 93, 10, 55, 35, 98, 69, 71, 9, 51, 64, 91, 46, 44, 78, 48, 58, 86, 74, 76, 47, 20, 60, 4, 68, 96, 33, 87, 25, 92, 29, 67, 72, 42, 85, 14, 61, 90, 99, 24, 21, 62, 75, 53, 12, 52, 17, 18, 1, 77, 3, 22]
# worst = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
global goal
goal = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]

global algorithms
algorithms = Algorithms()

def test_bubblesort_average(): # O(n^2)
    array = [79, 50, 30, 13, 95, 94, 57, 31, 7, 65, 88, 59, 39, 73, 28, 6, 5, 66, 82, 100, 32, 41, 27, 84, 36, 2, 56, 43, 38, 26, 19, 37, 16, 8, 54, 63, 45, 49, 34, 70, 89, 11, 15, 80, 83, 81, 23, 40, 97, 93, 10, 55, 35, 98, 69, 71, 9, 51, 64, 91, 46, 44, 78, 48, 58, 86, 74, 76, 47, 20, 60, 4, 68, 96, 33, 87, 25, 92, 29, 67, 72, 42, 85, 14, 61, 90, 99, 24, 21, 62, 75, 53, 12, 52, 17, 18, 1, 77, 3, 22]
    start = time.time()
    algorithms.bubblesort(array)
    end = time.time()
    print(f"\n-> Bubble | Average Case: {end-start:.6f}")
    assert goal == array

def test_bubblesort_best(): # O(n)
    array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]
    start = time.time()
    algorithms.bubblesort(array)
    end = time.time()
    print(f"-> Bubble | Best Case: {end-start:.6f}")
    assert goal == array    

def test_bubblesort_worst(): # O(n^2)
    array = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
    start = time.time()
    algorithms.bubblesort(array)
    end = time.time()
    print(f"-> Bubble | Worst Case: {end-start:.6f}")
    assert goal == array    

def test_insertionsort_average(): # O(n^2)
    array = [79, 50, 30, 13, 95, 94, 57, 31, 7, 65, 88, 59, 39, 73, 28, 6, 5, 66, 82, 100, 32, 41, 27, 84, 36, 2, 56, 43, 38, 26, 19, 37, 16, 8, 54, 63, 45, 49, 34, 70, 89, 11, 15, 80, 83, 81, 23, 40, 97, 93, 10, 55, 35, 98, 69, 71, 9, 51, 64, 91, 46, 44, 78, 48, 58, 86, 74, 76, 47, 20, 60, 4, 68, 96, 33, 87, 25, 92, 29, 67, 72, 42, 85, 14, 61, 90, 99, 24, 21, 62, 75, 53, 12, 52, 17, 18, 1, 77, 3, 22]
    start = time.time()
    algorithms.insertionsort(array)
    end = time.time()
    print(f"-> Insertion | Average Case: {end-start:.6f}")
    assert goal == array

def test_insertionsort_best(): # O(n)
    array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]
    start = time.time()
    algorithms.insertionsort(array)
    end = time.time()
    print(f"-> Insertion | Best Case: {end-start:.6f}")
    assert goal == array    

def test_insertionsort_worst(): # O(n^2)
    array = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
    start = time.time()
    algorithms.insertionsort(array)
    end = time.time()
    print(f"-> Insertion | Worst Case: {end-start:.6f}")
    assert goal == array   

def test_selectionsort_average(): # O(n^2)
    array = [79, 50, 30, 13, 95, 94, 57, 31, 7, 65, 88, 59, 39, 73, 28, 6, 5, 66, 82, 100, 32, 41, 27, 84, 36, 2, 56, 43, 38, 26, 19, 37, 16, 8, 54, 63, 45, 49, 34, 70, 89, 11, 15, 80, 83, 81, 23, 40, 97, 93, 10, 55, 35, 98, 69, 71, 9, 51, 64, 91, 46, 44, 78, 48, 58, 86, 74, 76, 47, 20, 60, 4, 68, 96, 33, 87, 25, 92, 29, 67, 72, 42, 85, 14, 61, 90, 99, 24, 21, 62, 75, 53, 12, 52, 17, 18, 1, 77, 3, 22]
    start = time.time()
    algorithms.selectionsort(array)
    end = time.time()
    print(f"-> Selection | Average Case: {end-start:.6f}")
    assert goal == array

def test_selectionsort_best(): # O(n^2)
    array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]
    start = time.time()
    algorithms.selectionsort(array)
    end = time.time()
    print(f"-> Selection | Best Case: {end-start:.6f}")
    assert goal == array    

def test_selectionsort_worst(): # O(n^2)
    array = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
    start = time.time()
    algorithms.selectionsort(array)
    end = time.time()
    print(f"-> Selection | Worst Case: {end-start:.6f}")
    assert goal == array   

def test_mergesort_average(): # O(n^2)
    array = [79, 50, 30, 13, 95, 94, 57, 31, 7, 65, 88, 59, 39, 73, 28, 6, 5, 66, 82, 100, 32, 41, 27, 84, 36, 2, 56, 43, 38, 26, 19, 37, 16, 8, 54, 63, 45, 49, 34, 70, 89, 11, 15, 80, 83, 81, 23, 40, 97, 93, 10, 55, 35, 98, 69, 71, 9, 51, 64, 91, 46, 44, 78, 48, 58, 86, 74, 76, 47, 20, 60, 4, 68, 96, 33, 87, 25, 92, 29, 67, 72, 42, 85, 14, 61, 90, 99, 24, 21, 62, 75, 53, 12, 52, 17, 18, 1, 77, 3, 22]
    start = time.time()
    algorithms.mergesort(array)
    end = time.time()
    print(f"-> Merge | Average Case: {end-start:.6f}")
    assert goal == array

def test_mergesort_best(): # O(n^2)
    array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]
    start = time.time()
    algorithms.mergesort(array)
    end = time.time()
    print(f"-> Merge | Best Case: {end-start:.6f}")
    assert goal == array    

def test_mergesort_worst(): # O(n^2)
    array = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
    start = time.time()
    algorithms.mergesort(array)
    end = time.time()
    print(f"-> Merge | Worst Case: {end-start:.6f}")
    assert goal == array   